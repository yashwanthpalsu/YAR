@model IEnumerable<Reminder.Models.DBEntities.ChatMessage>
@{
    ViewData["Title"] = "AI Assistant";
    ViewData["UseGradientBg"] = true;
    Layout = "_Layout";
}

<div class="container-fluid h-100">
    <div class="row h-100">
        <!-- Chat Interface -->
        <div class="col-lg-8 h-100">
            <div class="card h-100 d-flex flex-column fade-in">
                <div class="card-header">
                    <div class="d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">
                            <i class="fas fa-bolt"></i>
                            <span>AI Assistant</span>
                        </h5>
                        <div class="header-actions">
                            <button class="btn btn-sm btn-outline-secondary me-2" onclick="clearChatHistory()">
                                <i class="fas fa-trash"></i>
                                <span>Clear History</span>
                            </button>
                            <button class="btn btn-sm btn-outline-primary" onclick="toggleVoiceInput()" id="voiceBtn">
                                <i class="fas fa-microphone"></i>
                                <span>Voice</span>
                            </button>
                        </div>
                    </div>
                </div>
                
                <div class="card-body flex-grow-1 d-flex flex-column">
                    <!-- Chat Messages -->
                    <div class="chat-messages flex-grow-1" id="chatMessages">
                        @if (!Model.Any())
                        {
                            <div class="text-center text-muted mt-5">
                                <div class="ai-welcome">
                                    <i class="fas fa-bolt fa-4x mb-4 text-primary"></i>
                                    <h4>Welcome to your AI Assistant!</h4>
                                    <p class="mb-4">I can help you manage your reminders. Try asking:</p>
                                    <div class="chat-suggestions">
                                        <ul class="suggestion-list">
                                            <li>"What reminders do I have?"</li>
                                            <li>"Schedule a meeting reminder"</li>
                                            <li>"Remind me to call mom tomorrow at 3pm"</li>
                                            <li>"Delete my meeting reminder"</li>
                                            <li>"Show me my upcoming tasks"</li>
                                            <li>"Edit my reminder settings"</li>
                                        </ul>
                                    </div>
                                </div>
                            </div>
                        }
                        else
                        {
                            @foreach (var message in Model)
                            {
                                <div class="message @(message.IsUserMessage ? "user-message" : "ai-message")">
                                    <div class="message-content">
                                        <div class="message-header">
                                            <div class="avatar-sm">
                                                <i class="fas @(message.IsUserMessage ? "fa-user" : "fa-bolt")"></i>
                                            </div>
                                            <div class="message-sender">@(message.IsUserMessage ? "You" : "AI Assistant")</div>
                                        </div>
                                        <div class="message-text">
                                            @if (message.IsUserMessage)
                                            {
                                                @message.Message
                                            }
                                            else
                                            {
                                                @message.Response
                                            }
                                        </div>
                                        <div class="message-time">@message.Timestamp.ToString("MMM dd, HH:mm")</div>
                                    </div>
                                </div>
                            }
                        }
                    </div>
                    
                    <!-- Input Area -->
                    <div class="chat-input">
                        <div class="input-group">
                            <input type="text" class="form-control" id="messageInput" placeholder="Type your message or use voice input..." 
                                   onkeypress="handleKeyPress(event)">
                            <button class="btn btn-primary" type="button" onclick="sendMessage()">
                                <i class="fas fa-paper-plane"></i>
                            </button>
                        </div>
                        <div class="mt-3">
                            <small class="text-muted">
                                <i class="fas fa-info-circle me-1"></i>
                                <span>You can ask me to list, schedule, edit, or delete your reminders</span>
                            </small>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Quick Actions Panel -->
        <div class="col-lg-4 h-100">
            <div class="card h-100 fade-in">
                <div class="card-header">
                    <h6 class="mb-0">
                        <i class="fas fa-bolt"></i>
                        <span>Quick Actions</span>
                    </h6>
                </div>
                <div class="card-body">
                    <div class="quick-actions">
                        <div class="d-grid gap-3">
                            <button class="btn btn-outline-primary" onclick="sendQuickMessage('What reminders do I have?')">
                                <i class="fas fa-list me-2"></i>
                                <span>List My Reminders</span>
                            </button>
                            <button class="btn btn-outline-success" onclick="sendQuickMessage('Schedule a new reminder')">
                                <i class="fas fa-plus me-2"></i>
                                <span>Schedule Reminder</span>
                            </button>
                            <button class="btn btn-outline-info" onclick="sendQuickMessage('Show me my upcoming reminders')">
                                <i class="fas fa-calendar me-2"></i>
                                <span>Upcoming Reminders</span>
                            </button>
                            <button class="btn btn-outline-warning" onclick="sendQuickMessage('Edit my reminders')">
                                <i class="fas fa-edit me-2"></i>
                                <span>Edit Reminders</span>
                            </button>
                        </div>
                        
                        <hr class="my-4">
                        
                        <div class="voice-commands">
                            <h6 class="mb-3">
                                <i class="fas fa-microphone me-2"></i>
                                <span>Voice Commands</span>
                            </h6>
                            <div class="chat-suggestions">
                                <p class="small mb-2"><strong>Try saying:</strong></p>
                                <ul class="suggestion-list">
                                    <li>"Remind me to..."</li>
                                    <li>"Schedule a meeting"</li>
                                    <li>"What's on my calendar?"</li>
                                    <li>"Delete my reminder"</li>
                                    <li>"Show my tasks"</li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Voice Input Modal -->
<div class="modal fade voice-modal" id="voiceModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-microphone"></i>
                    <span>Voice Input</span>
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div id="voiceStatus" class="voice-status">
                    <i class="fas fa-microphone fa-3x"></i>
                    <p class="mt-3">Click the button below to start recording</p>
                </div>
                <div id="voiceRecording" class="voice-status" style="display: none;">
                    <i class="fas fa-microphone-slash fa-3x"></i>
                    <p class="mt-3">Recording... Click to stop</p>
                </div>
                <button class="btn btn-primary btn-lg" id="recordButton" onclick="toggleRecording()">
                    <i class="fas fa-microphone me-2"></i>
                    <span>Start Recording</span>
                </button>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <link rel="stylesheet" href="~/css/chat.css" />
    <style>
        .header-actions {
            display: flex;
            gap: var(--spacing-2);
        }
        
        .voice-commands {
            background: var(--gray-50);
            border-radius: var(--radius-lg);
            padding: var(--spacing-4);
            border: 1px solid var(--gray-200);
        }
        
        .ai-welcome {
            padding: var(--spacing-6);
        }
        
        @@media (max-width: 768px) {
            .header-actions span {
                display: none;
            }
            
            .quick-actions .btn span {
                display: none;
            }
        }
    </style>
}

@section Scripts {
    <script>
        let isRecording = false;
        let recognition = null;
        
        // Initialize speech recognition
        if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
            recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();
            recognition.continuous = true;
            recognition.interimResults = false;
            recognition.lang = 'en-US';
            
            recognition.onresult = function(event) {
                const transcript = event.results[0][0].transcript;
                document.getElementById('messageInput').value = transcript;
                stopRecording();
            };
            
            recognition.onerror = function(event) {
                console.error('Speech recognition error:', event.error);
                stopRecording();
            };
        }
        
        function handleKeyPress(event) {
            if (event.key === 'Enter') {
                sendMessage();
            }
        }
        
        function sendMessage() {
            const messageInput = document.getElementById('messageInput');
            const message = messageInput.value.trim();
            
            if (!message) return;
            
            // Add user message to chat
            addMessageToChat(message, true);
            messageInput.value = '';
            
            // Show typing indicator
            showTypingIndicator();
            
            // Send to server
            fetch('@Url.Action("SendMessage", "Chat")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify({ message: message })
            })
            .then(response => response.json())
            .then(data => {
                hideTypingIndicator();
                if (data.success) {
                    addMessageToChat(data.message, false);
                    
                    // Handle follow-up questions
                    if (data.requiresFollowUp && data.followUpQuestion) {
                        setTimeout(() => {
                            addMessageToChat(data.followUpQuestion, false);
                        }, 1000);
                    }
                } else {
                    addMessageToChat('Sorry, I encountered an error. Please try again.', false);
                }
            })
            .catch(error => {
                hideTypingIndicator();
                addMessageToChat('Sorry, I encountered an error. Please try again.', false);
                console.error('Error:', error);
            });
        }
        
        function sendQuickMessage(message) {
            document.getElementById('messageInput').value = message;
            sendMessage();
        }
        
        function addMessageToChat(message, isUser) {
            const chatMessages = document.getElementById('chatMessages');
            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${isUser ? 'user-message' : 'ai-message'}`;
            
            const timestamp = new Date().toLocaleString('en-US', {
                month: 'short',
                day: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
            });
            
            messageDiv.innerHTML = `
                <div class="message-content">
                    <div class="message-header">
                        <div class="avatar-sm">
                            <i class="fas ${isUser ? 'fa-user' : 'fa-bolt'}"></i>
                        </div>
                        <div class="message-sender">${isUser ? 'You' : 'AI Assistant'}</div>
                    </div>
                    <div class="message-text">${message}</div>
                    <div class="message-time">${timestamp}</div>
                </div>
            `;
            
            chatMessages.appendChild(messageDiv);
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }
        
        function showTypingIndicator() {
            const chatMessages = document.getElementById('chatMessages');
            const typingDiv = document.createElement('div');
            typingDiv.className = 'message ai-message typing-indicator-message';
            typingDiv.id = 'typingIndicator';
            
            typingDiv.innerHTML = `
                <div class="typing-indicator">
                    <span>AI is typing</span>
                    <div class="typing-dots">
                        <div class="typing-dot"></div>
                        <div class="typing-dot"></div>
                        <div class="typing-dot"></div>
                    </div>
                </div>
            `;
            
            chatMessages.appendChild(typingDiv);
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }
        
        function hideTypingIndicator() {
            const typingIndicator = document.getElementById('typingIndicator');
            if (typingIndicator) {
                typingIndicator.remove();
            }
        }
        
        function clearChatHistory() {
            if (confirm('Are you sure you want to clear the chat history?')) {
                fetch('@Url.Action("ClearHistory", "Chat")', {
                    method: 'POST',
                    headers: {
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    }
                })
                .then(response => {
                    if (response.ok) {
                        location.reload();
                    }
                })
                .catch(error => {
                    console.error('Error clearing history:', error);
                });
            }
        }
        
        function toggleVoiceInput() {
            const modal = new bootstrap.Modal(document.getElementById('voiceModal'));
            modal.show();
        }
        
        function toggleRecording() {
            if (!recognition) {
                alert('Speech recognition is not supported in your browser.');
                return;
            }
            
            if (isRecording) {
                stopRecording();
            } else {
                startRecording();
            }
        }
        
        function startRecording() {
            isRecording = true;
            document.getElementById('voiceStatus').style.display = 'none';
            document.getElementById('voiceRecording').style.display = 'block';
            document.getElementById('recordButton').innerHTML = '<i class="fas fa-stop me-2"></i><span>Stop Recording</span>';
            recognition.start();
        }
        
        function stopRecording() {
            isRecording = false;
            document.getElementById('voiceStatus').style.display = 'block';
            document.getElementById('voiceRecording').style.display = 'none';
            document.getElementById('recordButton').innerHTML = '<i class="fas fa-microphone me-2"></i><span>Start Recording</span>';
            recognition.stop();
            
            const modal = bootstrap.Modal.getInstance(document.getElementById('voiceModal'));
            if (modal) {
                modal.hide();
            }
        }
    </script>
} 