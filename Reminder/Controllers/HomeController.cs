using System.Diagnostics;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Reminder.Models;
using Reminder.Models.DBEntities;
using Reminder.Services;

namespace Reminder.Controllers;

[Authorize]
public class HomeController : Controller
{
    private readonly ILogger<HomeController> _logger;

    private readonly IConfiguration _configuration;

    private readonly IReminderService _reminderService;

    private readonly IAuthService _authService;

    public HomeController(ILogger<HomeController> logger, IConfiguration configuration, IReminderService reminderService, IAuthService authService)
    {
        _logger = logger;
        _configuration = configuration;
        _reminderService = reminderService;
        _authService = authService;
    }

    public async Task<IActionResult> Index()
    {
        var currentUser = await _authService.GetCurrentUserAsync();
        if (currentUser == null)
        {
            return RedirectToAction("Login", "Account");
        }

        ViewData["UserName"] = currentUser.FullName;
        return View();
    }

    public bool TestDatabaseConnection()
    {
        var connectionString = _configuration.GetConnectionString("DefaultConnection");
        var optionsBuilder = new DbContextOptionsBuilder<SchedulerDbContext>();
        optionsBuilder.UseSqlServer(connectionString);

        try
        {
            using (var context = new SchedulerDbContext(optionsBuilder.Options))
            {
                context.Database.OpenConnection();
                context.Database.CloseConnection();
            }
            return true;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Database connection test failed.");
            return false;
        }
    }


    public IActionResult Privacy()
    {
        return View();
    }

    [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]
    public IActionResult Error()
    {
        return View(new ErrorViewModel { RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier });
    }

    [HttpPost]
    public async Task<IActionResult> CreateReminder(ReminderViewModel model)
    {
        // Get current user
        var currentUser = await _authService.GetCurrentUserAsync();
        if (currentUser == null)
        {
            return RedirectToAction("Login", "Account");
        }

        // Set the UserId from the current user
        model.UserId = currentUser.Id;

        // Clear validation errors for Reminder navigation properties in schedules
        if (model.Schedules != null)
        {
            foreach (var schedule in model.Schedules)
            {
                // Clear the Reminder navigation property to avoid validation issues
                schedule.Reminder = null;
                
                // Clear any existing IDs to ensure they're generated by the database
                schedule.ScheduleId = 0;
                schedule.ReminderId = 0;
            }
        }

        // Clear the ReminderId to ensure it's generated by the database
        model.ReminderId = 0;

        if (!ModelState.IsValid)
        {
            // Log validation errors for debugging
            var errors = ModelState.Values.SelectMany(v => v.Errors).Select(e => e.ErrorMessage);
            _logger.LogWarning("Model validation failed: {Errors}", string.Join(", ", errors));
            
            // Return view with validation errors
            return View("Index", model);
        }

        try
        {
            var success = await _reminderService.CreateReminderAsync(model);
            
            if (success)
            {
                TempData["SuccessMessage"] = "Reminder created successfully!";
                return RedirectToAction("Index");
            }
            else
            {
                _logger.LogError("Failed to create reminder for user {UserId}", model.UserId);
                ModelState.AddModelError("", "Failed to create reminder. Please try again.");
                return View("Index", model);
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error creating reminder for user {UserId}", model.UserId);
            ModelState.AddModelError("", "An error occurred while creating the reminder. Please try again.");
            return View("Index", model);
        }
    }

}
